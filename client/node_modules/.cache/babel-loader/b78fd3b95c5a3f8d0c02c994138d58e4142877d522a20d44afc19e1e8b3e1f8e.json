{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adm\\\\Desktop\\\\app\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\"; //! Biblioteca do react a ser instalada com o pacote de \"Component\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\n//! Basicamente a função abaixo se trata de classificar o \"App\" como uma extensão de que o \"Component\" faz;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      resposta: \"\"\n    };\n    //! Ativando a cada instância do projeto a chamada pela API [ chamadaAPI ] e transformando a resposta na mensagem que vem de API [ res.mensagem ];\n    this.chamadaAPI = async () => {\n      const response = await fetch(\"/api\");\n      const body = await response.json();\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n      ;\n      return body;\n    };\n  }\n  //! No estado [ state ] atual em que se encontra as atualizações do projeto ele vai manter uma resposta, essa no qual será logo após definida pela conexão com a API;\n\n  componentDidMount() {\n    this.chamadaAPI().then(res => {\n      console.log(\"Resposta da API:\", res);\n      this.setState({\n        resposta: \"\"\n      });\n    }).catch(err => console.log(\"Erro da chamada de API:\", err));\n  }\n  //! A conexão com a API em si pelo uso assíncrono do fetch na rota \"/api\" [ futuramente será bem alterado essa parte ] e retornando as respostas [ mensagens vindas delas no \"res\" ] como JSON;\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"Api-mensagem\",\n        children: this.state.resposta\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          className: \"App-logo\",\n          alt: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"App-title\",\n          children: \"Welcome to React\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  }\n}\n;\nexport default App;","map":{"version":3,"names":["React","Component","logo","jsxDEV","_jsxDEV","App","constructor","args","state","resposta","chamadaAPI","response","fetch","body","json","status","Error","message","componentDidMount","then","res","console","log","setState","catch","err","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt"],"sources":["C:/Users/adm/Desktop/app/client/src/App.js"],"sourcesContent":["import React, {Component} from \"react\"; //! Biblioteca do react a ser instalada com o pacote de \"Component\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\n//! Basicamente a função abaixo se trata de classificar o \"App\" como uma extensão de que o \"Component\" faz;\nclass App extends Component {\n  state = {\n    resposta: \"\"\n  }; //! No estado [ state ] atual em que se encontra as atualizações do projeto ele vai manter uma resposta, essa no qual será logo após definida pela conexão com a API;\n\n  componentDidMount() {\n    this.chamadaAPI()\n      .then(res => {\n        console.log(\"Resposta da API:\", res);\n        this.setState({ resposta: \"\" })\n      })\n      .catch(err => console.log(\"Erro da chamada de API:\", err));\n  }; //! Ativando a cada instância do projeto a chamada pela API [ chamadaAPI ] e transformando a resposta na mensagem que vem de API [ res.mensagem ];\n\n  chamadaAPI = async () => {\n    const response = await fetch(\"/api\");\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message);\n    };\n\n    return body;\n  }; //! A conexão com a API em si pelo uso assíncrono do fetch na rota \"/api\" [ futuramente será bem alterado essa parte ] e retornando as respostas [ mensagens vindas delas no \"res\" ] como JSON;\n\n  render() {\n    return (\n      <div className=\"App\">\n        <p className=\"Api-mensagem\">{this.state.resposta}</p>\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to React</h1>\n        </header>\n      </div>\n    );\n  };\n};\n\nexport default App;"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,SAAS,QAAO,OAAO,CAAC,CAAC;AACxC,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;;AAElB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,GAAG,SAASJ,SAAS,CAAC;EAAAK,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KAC1BC,KAAK,GAAG;MACNC,QAAQ,EAAE;IACZ,CAAC;IASE;IAAA,KAEHC,UAAU,GAAG,YAAY;MACvB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,MAAM,CAAC;MACpC,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElC,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAMC,KAAK,CAACH,IAAI,CAACI,OAAO,CAAC;MAC3B;MAAC;MAED,OAAOJ,IAAI;IACb,CAAC;EAAA;EApBE;;EAEHK,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACR,UAAU,CAAC,CAAC,CACdS,IAAI,CAACC,GAAG,IAAI;MACXC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,GAAG,CAAC;MACpC,IAAI,CAACG,QAAQ,CAAC;QAAEd,QAAQ,EAAE;MAAG,CAAC,CAAC;IACjC,CAAC,CAAC,CACDe,KAAK,CAACC,GAAG,IAAIJ,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEG,GAAG,CAAC,CAAC;EAC9D;EAWG;;EAEHC,MAAMA,CAAA,EAAG;IACP,oBACEtB,OAAA;MAAKuB,SAAS,EAAC,KAAK;MAAAC,QAAA,gBAClBxB,OAAA;QAAGuB,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAE,IAAI,CAACpB,KAAK,CAACC;MAAQ;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrD5B,OAAA;QAAQuB,SAAS,EAAC,YAAY;QAAAC,QAAA,gBAC5BxB,OAAA;UAAK6B,GAAG,EAAE/B,IAAK;UAACyB,SAAS,EAAC,UAAU;UAACO,GAAG,EAAC;QAAM;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAClD5B,OAAA;UAAIuB,SAAS,EAAC,WAAW;UAAAC,QAAA,EAAC;QAAgB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAEV;AACF;AAAC;AAED,eAAe3B,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}